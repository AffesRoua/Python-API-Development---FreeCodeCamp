"""create posts table

Revision ID: d794ba121915
Revises: 
Create Date: 2024-09-22 23:43:34.169224

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

#commands 
# alembic upgrade revision_code , exp : alembic revion d794ba121915 
#or  you cand do : alembic downgrade -1 to go from current to next revision
# or you cand do : alembic upgrade head this upgrades from the current revision to the latest revision
# alembic downgrade revision_code , exp : alembic revion d794ba121915 
# or you cand do : alembic downgrade head if it's the latest revisison
#or  you cand do : alembic downgrade -1 which means return to the state of the revision before the current
# alembic current : to know the head or the current revision 
# alembic revision -m "message ..." to create a new revision with the title message ....

# revision identifiers, used by Alembic.
revision: str = 'd794ba121915'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    # ### Commands auto generated by Alembic - Manual modifications added for the models
    # Creating the users table
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
        sa.Column('email', sa.String(), nullable=False, unique=True),
        sa.Column('password', sa.String(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('now()')),
    )

    # Creating the posts table
    op.create_table(
        'posts',
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('content', sa.String(), nullable=False),
        sa.Column('published', sa.Boolean(), nullable=False, server_default='True'),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('owner_id', sa.Integer(), sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
    )

    # Creating the votes table
    op.create_table(
        'votes',
        sa.Column('post_id', sa.Integer(), sa.ForeignKey('posts.id', ondelete='CASCADE'), primary_key=True, nullable=False),
        sa.Column('user_id', sa.Integer(), sa.ForeignKey('users.id', ondelete='CASCADE'), primary_key=True, nullable=False),
    )


def downgrade():
    # Dropping the votes table
    op.drop_table('votes')

    # Dropping the posts table
    op.drop_table('posts')

    # Dropping the users table
    op.drop_table('users')
